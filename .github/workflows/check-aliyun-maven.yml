name: Check Aliyun Maven Dependencies

on:
  pull_request_target:
    types: [ opened, synchronize ]
  workflow_dispatch:

jobs:
  check-dependencies:
    # 只在dependabot的PR上运行
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check Aliyun Maven availability
        id: check-aliyun
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const core = require('@actions/core');
            const github = require('@actions/github');

            try {
              // 获取变更的依赖
              const diffOutput = execSync('git diff origin/${{ github.event.pull_request.base.ref }} -- build.gradle || git diff origin/${{ github.event.pull_request.base.ref }} -- pom.xml').toString();

              // 解析依赖变更
              const dependencies = [];
              const regex = /([+-])\s*(implementation|api|compile|testImplementation|runtimeOnly)\s*['"]([^'"]+)['"]/g;
              let match;

              while ((match = regex.exec(diffOutput)) !== null) {
                if (match[1] === '+') { // 只关心新增的依赖
                  const depParts = match[3].split(':');
                  if (depParts.length === 3) {
                    dependencies.push({
                      group: depParts[0],
                      artifact: depParts[1],
                      version: depParts[2]
                    });
                  }
                }
              }

              if (dependencies.length === 0) {
                core.setOutput('result', 'No dependency changes found');
                return 'No dependency changes to check';
              }

              // 检查阿里云Maven是否有这些依赖
              const results = [];
              const aliMavenUrl = 'https://maven.aliyun.com/repository/public';

              for (const dep of dependencies) {
                const artifactPath = dep.group.replace(/\./g, '/') + '/' + dep.artifact + '/' + dep.version;
                const pomUrl = `${aliMavenUrl}/${artifactPath}/${dep.artifact}-${dep.version}.pom`;

                try {
                  execSync(`curl -I -s -o /dev/null -w "%{http_code}" ${pomUrl} | grep 200`);
                  results.push(`✅ ${dep.group}:${dep.artifact}:${dep.version} - 可用`);
                } catch (e) {
                  results.push(`❌ ${dep.group}:${dep.artifact}:${dep.version} - 不可用`);
                }
              }

              const commentBody = `### 阿里云 Maven 依赖检查结果\n\n${results.join('\n')}`;
              core.setOutput('result', commentBody);

              // 添加PR评论
              const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
              await octokit.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });

              return commentBody;
            } catch (error) {
              core.setFailed(`Action failed with error: ${error}`);
            }

      - name: Output result
        run: echo "${{ steps.check-aliyun.outputs.result }}"
